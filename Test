-- ZHub

if game.PlaceId == 17574618959 or game.PlaceId == 189707 then

        game:GetService("StarterGui"):SetCore("SendNotification",{
        Title = "ZenHub",
        Text = "Loading Script...",
    })

    local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

    -- Services

    local Players = game:GetService("Players")

    -------

    print("V1.22")

    local Window = Rayfield:CreateWindow({
    Name = "ZenHub",
    Icon = 0, -- Icon in Topbar. Can use Lucide Icons (string) or Roblox Image (number). 0 to use no icon (default).
    LoadingTitle = "ZenHub is now loading.",
    LoadingSubtitle = "by Z",
    ShowText = "ZenHub", -- for mobile users to unhide rayfield, change if you'd like
    Theme = "Serenity", -- Check https://docs.sirius.menu/rayfield/configuration/themes

    ToggleUIKeybind = "K", -- The keybind to toggle the UI visibility (string like "K" or Enum.KeyCode)

    DisableRayfieldPrompts = false,
    DisableBuildWarnings = false, -- Prevents Rayfield from warning when the script has a version mismatch with the interface

    ConfigurationSaving = {
        Enabled = true,
        FolderName = nil, -- Create a custom folder for your hub/game
        FileName = "ZenHub"
    },

    Discord = {
        Enabled = true, -- Prompt the user to join your Discord server if their executor supports it
        Invite = "https://discord.gg/xKqBjWDzP5", -- The Discord invite code, do not include discord.gg/. E.g. discord.gg/ ABCD would be ABCD
        RememberJoins = false -- Set this to false to make them join the discord every time they load it up
    },

    KeySystem = true, -- Set this to true to use our key system
    KeySettings = {
        Title = "ZenHub",
        Subtitle = "Key System",
        Note = "Join the server and verify to get your key.", -- Use this to tell the user how to get a key
        FileName = "ZHubKey", -- It is recommended to use something unique as other scripts using Rayfield may overwrite your key file
        SaveKey = true, -- The user's key will be saved, but if you change the key, they will be unable to use your script
        GrabKeyFromSite = false, -- If this is true, set Key below to the RAW site you would like Rayfield to get the key from
        Key = {"ZHub"} -- List of keys that will be accepted by the system, can be RAW file links (pastebin, github etc) or simple strings ("hello","key22")
    }
    })

    -- Tabs
    local Tab1 = Window:CreateTab("Main")
    local Tab2 = Window:CreateTab("Extra")

    -- Sections
    local Section1 = Tab1:CreateSection("Character")
    local Section2 = Tab2:CreateSection("Debug")

    -- Dividers

    local Divider1 = Tab1:CreateDivider()
    local Divider2 = Tab2:CreateDivider()

    -- Buttons
    local Button = Tab2:CreateButton({
    Name = "Rejoin",
    Callback = function()
        local ts = game:GetService("TeleportService")
        local p = game:GetService("Players").LocalPlayer

        ts:Teleport(game.PlaceId, p)
    end,
    })

    -- # Speed Hack + Infinite Jump (fixed)

    local Players           = game:GetService("Players")
    local UserInputService = game:GetService("UserInputService")
    local LocalPlayer      = Players.LocalPlayer

    -- grab initial character
    local Character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
    local Humanoid  = Character:WaitForChild("Humanoid")

    -- defaults
    local originalWalkspeed = 16
    local originalJumppower = 50

    -- state flags
    local speedEnabled = false
    local jumpEnabled  = false

    -- placeholder vars
    local Slider1, Toggle1, Slider2, Toggle2

    -- Walkspeed Slider
    Slider1 = Tab1:CreateSlider({
        Name         = "Walkspeed",
        Range        = {16, 100},
        Increment    = 1,
        Suffix       = "Walkspeed",
        CurrentValue = originalWalkspeed,
        Flag         = "Slider1",
        Callback     = function(val)
            if speedEnabled and Humanoid then
                Humanoid.WalkSpeed = val
            end
        end,
    })

    -- Speed Toggle
    Toggle1 = Tab1:CreateToggle({
        Name         = "Speed",
        CurrentValue = false,
        Flag         = "Toggle1",
        Callback     = function(on)
            speedEnabled = on
            applySettings()
        end,
    })

    -- Jumppower Slider
    Slider2 = Tab1:CreateSlider({
        Name         = "Jumppower",
        Range        = {50, 200},
        Increment    = 1,
        Suffix       = "Jumppower",
        CurrentValue = originalJumppower,
        Flag         = "Slider2",
        Callback     = function(val)
            if jumpEnabled and Humanoid then
                Humanoid.JumpPower = val
            end
        end,
    })

    -- Infinite Jump Toggle
    Toggle2 = Tab1:CreateToggle({
        Name         = "Infinite Jump",
        CurrentValue = false,
        Flag         = "Toggle2",
        Callback     = function(on)
            jumpEnabled = on
            applySettings()
        end,
    })

    -- apply current settings to the active humanoid
    local function applySettings()
        if not Humanoid then return end
        Humanoid.WalkSpeed = speedEnabled and Slider1.CurrentValue or originalWalkspeed
        Humanoid.JumpPower = jumpEnabled  and Slider2.CurrentValue or originalJumppower
    end

    -- re-acquire Humanoid on respawn and reapply
    LocalPlayer.CharacterAdded:Connect(function(char)
        Character = char
        Humanoid  = char:WaitForChild("Humanoid")
        applySettings()
    end)

    -- infinite jump listener
    UserInputService.JumpRequest:Connect(function()
        if jumpEnabled and Humanoid then
            Humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
        end
    end)

    -- ensure UI toggles are off on first load
    Toggle1:Set(false)
    Toggle2:Set(false)

    -- load saved config, then push those values to the humanoid
    Rayfield:LoadConfiguration()
    applySettings()

else
    game:GetService("StarterGui"):SetCore("SendNotification",{
	Title = "ZenHub",
	Text = "Game is not Supported.",
})
end
